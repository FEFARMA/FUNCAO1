# -*- coding: utf-8 -*-
"""12/03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VtZNThPQIWd9RooUGZyNF6Rr_83h8DN_

Implemete a funcao somas(listas) que recebe uma lista de numeros e retorna a soma dos numeros e a soma dos numeros ao quadrado.
"""

def area_circulo(raio):
  return 3.1415 * raio ** 2
  print("A area do circulo unitario vale:", area_circulo(1))

PI = 3.1415

def area_circulo(raio):
  return PI * raio ** 2
  print("A area do circulo unitario vale:", area_circulo(1))

PI = 3.1415

def area_circulo(raio):
  PI = 3
  return PI * raio ** 2
print("A area do circulo unitario vale:", area_circulo(1))
print("PI =", PI)

def externa():
  print("Esta e a funcao externa ")

def interna():
  print("Esta e a funcao interna ")

interna()

externa()

def externa():
  print("Esta e a funcao externa ")

def interna():
  print("Esta e a funcao interna ")
  print(f"Valor de PI: (PI) ")

PI = 3.1415
interna()

externa()

"""def externa():
  print("Esta e a funcao externa ")

def interna():
  print("Esta e a funcao interna ")

interna()

externa()
"""

def calculadora(operador):
  def operacao(a,b):
    return eval(f"{a} {operador} {b} ") # eval = avaliar ou executar uma função ou string

    return operacao

soma = calculadora("+")
print(soma(5, 3))

subtracao = calculadora("-")
print(subtracao(10, 4))

multiplicacao = calculadora ("*")
print(multiplicacao(6, 7))

divisao = calculadora("/")
print(divisao(20, 4))

from re import I
#funcao recursiva potencia(a,b)
# potencia(a,b) = a * potencia(a, b-1)
# caso base: potencia(a, 0) = 1

def potencia(a, b):

  """
  Funcao Recursiva que calcula a elevado a b: a ** b
  com b >= 0

  """
  if b == 0:
   return 1
  return a * potencia(a, b-1)


potencia (5, 3)

help(potencia)

# versao iterativa
# potencia(a, b) = a * a * ... * a, b vezes

def potenciaI(a,b):
  pot = 1
  for _ in range(b):
    pot = pot * a
  return pot
potenciaI(5, 3)

"""13. Faça um programa que pergunte ao usuário se ele quer passar uma temperatura de
Fahrenheit para Celsius ou de Celsius para Fahrenheit, e que, a partir da resposta
do usuário, faça a devida conversão.

"""

celsius_para_fhareinheit = lambda c: c * 1.8 + 32
print(celsius_para_fhareinheit(0) )
print(celsius_para_fhareinheit(21) )
print(celsius_para_fhareinheit(100) )

celsius_para_fhareinheit = lambda c: c * 9/5 + 32
print(celsius_para_fhareinheit(0) )
print(celsius_para_fhareinheit(21) )
print(celsius_para_fhareinheit(100) )

max = lambda a, b : a > b else b

max(1, 2)

(lambda c: c * 9/5 + 32  ) (100)

def raiz(N):
  """
  Calcula a raiz quadrada de N
  Usando o algoritmo:
  x_(n+1) = 1/2 * (x_n + N/x_n)

  """

  x = 1
  for n in range(3):
    print(f"n = {n:3}, x = {x:5.2f}, N/x = {N/x:5.2f} ")
    x = 1/2 * (x + N/x)
    print(f"x = {x:5.2f} ")

  return x

N = 5
raiz(N) * raiz(N)

def raiz(N):
  """
  Calcula a raiz quadrada de N
  Usando o algoritmo:
  x_(n+1) = 1/2 * (x_n + N/x_n)

  """

  x = 1
  while abs(x * x - N)  > 0.0001:
    print(f" x = {x:5.2f}, N/x = {N/x:5.2f} ")
    x = 1/2 * (x + N/x)
    print(f"x = {x:5.2f} ")

  return x

N = 5
raiz(N) * raiz(N)

"""1e -2 == 10 ** -2

Função Pitágoras
"""

def pitagoras(a, b):

  N = a**2 + b**2
  x = N / 2

  for c in range(3): # c = hipotenusa
    print(f"n = {c + 1:3}, x = {x:4.2f} ")
    x = 1/2 * (x + N/x)
    print(f"c = {c:4.2f} ")

  return x

a = 3
b = 4
result = pitagoras(a, b)
print(f"Result: {result:.2f}")

def pitagoras(a, b):
  """
  Calcule a hipotenusa de triangulo retangulo de catetos a e b

  """
  return raiz(2**a + b ** 2)
pitagoras(3,4)

"""Crie uma sequenia recursiva que retorna o n-ésimo termo da sequência de Fibonacci. A sequência de fibonacci é da forma: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34,...
Onde o termo corrente é a soma dos sois termos anteriores é:
fibonacci(n) = fibonacci(n - 1)  + fibonacci(n - 2)
"""

def fibonacci(n):
  if n == 1 or n == 2:
    return "1 "

  return fibonacci(n - 1)  + fibonacci(n - 2) # penultimo + anti-penultimo

(fibonacci(1), fibonacci(2), fibonacci(3), fibonacci(4), fibonacci(5), fibonacci(6), fibonacci(7))

[fibonacci(n) for n in range(1, 8)]

"""Equação de 2 grau"""

def eqgrau2(a, b, c):
  """
  Resolve:
  a * x ** 2 + b * x + c = 0

  """

  delta = (b**2 - 4 * a * c)
  if delta < 0:
    print(f"Delta({delta}) e menor do que zero ")
    return none

  rdelta = raiz(delta)
  x1 = (-b - rdelta) / (2*a)
  x2 = (-b + rdelta) / (2*a)
  return x1, x2

# (x-2) * (x-3)
# x ** 2 - 5 * x + 6 = 0
# a = 1, b = - 5 , c = 6

eqgrau2(a, b, c)

def soma_recursiva(n):
  if n == 1:
    return 1
  return n + soma_recursiva(n - 1)

soma_recursiva(100)

def soma_iterativa(n):
    if i == 1:
      return 1
    for i in range(1, n +1)
    return n + soma_recursiva(n - 1)

def estima_pi(n):
 return 4 * sum(1/[(2*x+1) * (-1) ** x) for x in range (n)])

estima_pi(1)

estima_pi(10)